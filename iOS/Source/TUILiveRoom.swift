//
//  TUILiveRoom.swift
//  TUILiveRoom
//
//  Created by jack on 2022/5/24.
//  Copyright © 2022 Tencent. All rights reserved.

import Foundation
import TUICore

@objc
public protocol TUILiveRoomDelegate: NSObjectProtocol {
    
    /// Create room callback
    /// - Parameters:
    ///   - code: 0: success. else: fail
    ///   - message: result message.
    @objc
    optional func onRoomCreate(code: Int, message: String)
    
    /// Enter room callback
    /// - Parameters:
    ///   - code: 0: success. else: fail
    ///   - message: result message.
    @objc
    optional func onRoomEnter(code: Int, message: String)
    
}

@objcMembers
public class TUILiveRoom: NSObject {
    
    /// TUILiveRoom
    /// - note: TUILiveRoom Object（Singleton Pattern）
    public static let sharedInstance: TUILiveRoom = TUILiveRoom()
    
    /// TUILiveRoomDelegate
    /// - note: TUILiveRoom createRoom、enterRoom callback
    public weak var delegate: TUILiveRoomDelegate? = nil
    
    /// Enter Room Status: true is already in room, false is not.
    internal var isEnterRoom: Bool = false
    
    private var liveRoom: TRTCLiveRoom {
        return TRTCLiveRoom.shareInstance()
    }
    
    /// CreateRoom
    /// - Parameters:
    ///   - roomId: Int generated by the server.
    ///   - roomName: room's name.
    ///   - coverUrl: room's cover.
    @objc
    public func createRoom(roomId: Int, roomName: String, coverUrl: String? = nil) {
        if isEnterRoom {
            delegate?.onRoomCreate?(code: -1, message: .alreadyInRoom)
            return
        }
        if roomId <= 0 {
            delegate?.onRoomCreate?(code: -1, message: .roomIdErrorToast)
            return
        }
        if roomName.isEmpty {
            delegate?.onRoomCreate?(code: -1, message: .roomNameEmptyToast)
            return
        }
        guard let userId = TUILogin.getUserID(), !userId.isEmpty else {
            delegate?.onRoomCreate?(code: -1, message: .noLoginToast)
            return
        }
        guard let userSig = TUILogin.getUserSig(), !userSig.isEmpty else {
            delegate?.onRoomCreate?(code: -1, message: .noLoginToast)
            return
        }
        let sdkAppID = Int32(TUILogin.getSdkAppID())
        let roomConfig = TRTCLiveRoomConfig()
        TUILiveRoomProfileManager.sharedManager().setProfileInfo(SDKAPPID: sdkAppID, avatar: (TUILogin.getFaceUrl() ?? ""), userId: userId, name: (TUILogin.getNickName() ?? ""))
        liveRoom.login(sdkAppID: sdkAppID, userID: userId, userSig: userSig, config: roomConfig) { [weak self] (code, msg) in
            guard let self = self else { return }
            if code == 0 {
                let roomInfo = TRTCLiveRoomInfo()
                roomInfo.roomId = String(roomId)
                roomInfo.ownerId = userId
                roomInfo.ownerName = (TUILogin.getNickName() ?? "")
                roomInfo.roomName = roomName
                roomInfo.coverUrl = coverUrl ?? ""
                let vc = TCAnchorViewController(roomInfo: roomInfo)
                vc.liveRoom = self.liveRoom
                self.presentRoomController(vc: vc)
            }
            self.delegate?.onRoomCreate?(code: Int(code), message: msg ?? "")
        }
    }
    
    /// EnterRoom
    /// - Parameter roomId: Int generated by the server.
    @objc
    public func enterRoom(roomId: Int) {
        if isEnterRoom {
            delegate?.onRoomEnter?(code: -1, message: .alreadyInRoom)
            return
        }
        if roomId <= 0 {
            delegate?.onRoomEnter?(code: -1, message: .roomIdErrorToast)
            return
        }
        guard let userId = TUILogin.getUserID(), !userId.isEmpty else {
            delegate?.onRoomEnter?(code: -1, message: .noLoginToast)
            return
        }
        guard let userSig = TUILogin.getUserSig(), !userSig.isEmpty else {
            delegate?.onRoomEnter?(code: -1, message: .noLoginToast)
            return
        }
        let sdkAppID = Int32(TUILogin.getSdkAppID())
        let roomConfig = TRTCLiveRoomConfig()
        TUILiveRoomProfileManager.sharedManager().setProfileInfo(SDKAPPID: sdkAppID, avatar: (TUILogin.getFaceUrl() ?? ""), userId: userId, name: (TUILogin.getNickName() ?? ""))
        liveRoom.login(sdkAppID: sdkAppID, userID: userId, userSig: userSig, config: roomConfig) { [weak self] (code, msg) in
            guard let self = self else { return }
            if code == 0 {
                self.liveRoom.getRoomInfos(roomIDs: [String(roomId)]) { [weak self] (code, msg, rooms) in
                    guard let self = self else { return }
                    guard code == 0 else {
                        self.delegate?.onRoomEnter?(code: Int(code), message: msg ?? .enterRoomErrorText)
                        return
                    }
                    guard let roomInfo = rooms.first else {
                        self.delegate?.onRoomEnter?(code: Int(code), message: msg ?? .enterRoomErrorText)
                        return
                    }
                    let vc = TCAudienceViewController(roomInfo: roomInfo)
                    vc.liveRoom = self.liveRoom
                    self.presentRoomController(vc: vc)
                    self.delegate?.onRoomEnter?(code: 0, message: "success")
                }
            } else {
                self.delegate?.onRoomEnter?(code: Int(code), message: msg ?? "")
            }
        }
    }
}

// MARK: - Private
fileprivate extension TUILiveRoom {
    
    private func presentRoomController(vc: UIViewController) {
        let current = currentViewController()
        let navRoomVC = UINavigationController(rootViewController: vc)
        navRoomVC.modalPresentationStyle = .fullScreen
        current?.present(navRoomVC, animated: true)
        isEnterRoom = true
    }
    
    private func currentViewController() -> UIViewController? {
        var keyWindow: UIWindow? = nil
        for window in UIApplication.shared.windows {
            if window.isMember(of: UIWindow.self), window.isKeyWindow {
                keyWindow = window
                break
            }
        }
        guard let rootController = keyWindow?.rootViewController else {
            return nil
        }
        func findCurrentController(from vc: UIViewController?) -> UIViewController? {
            if let nav = vc as? UINavigationController  {
                return findCurrentController(from: nav.topViewController)
            } else if let tabBar = vc as? UITabBarController {
                return findCurrentController(from: tabBar.selectedViewController)
            } else if let presented = vc?.presentedViewController {
                return findCurrentController(from: presented)
            }
            return vc
        }
        return findCurrentController(from: rootController)
    }
}

// MARK: - internationalization string
fileprivate extension String {
    static var alreadyInRoom: String {
        liveRoomLocalize("Demo.TRTC.LiveRoom.alreadyin")
    }
    static var noLoginToast: String {
        liveRoomLocalize("Demo.TRTC.LiveRoom.notlogin")
    }
    static var roomNameEmptyToast: String {
        liveRoomLocalize("Demo.TRTC.LiveRoom.roomnamecantbeempty")
    }
    static var roomIdErrorToast: String {
        liveRoomLocalize("Demo.TRTC.LiveRoom.roomId.error")
    }
    static var enterRoomErrorText: String {
        liveRoomLocalize("Demo.TRTC.LiveRoom.enterroomfailed")
    }
}
